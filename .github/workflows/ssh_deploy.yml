name: SSH Deploy
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      # Install PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        env:
          update: true
      - name: Check PHP Version
        run: php -v
      # Install backend dependencies (Composer)
      - name: Validate composer.json and composer.lock
        run: composer validate
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install
      # Prepare .env file for production
      - name: Make production envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_APP_ENV: prod
          envkey_APP_DEBUG: false
          envkey_APP_SECRET: ${{ secrets.APP_SECRET }}
          file_name: .env
      # Upload artifact to github for deployment
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          if-no-files-found: error
          path: |
            ./assets
            ./bin
            ./config
            ./public
            ./src
            ./templates
            ./vendor
            ./importmap.php
            ./composer.json
            ./composer.lock
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app
 
      - name: Deploy with rsync
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -avzr --delete --omit-dir-times
          path: .
          remote_path: ${{ secrets.REMOTE_TARGET }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SERVER_SSH_KEY }}
      - name: ls -a via ssh
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: ${{ secrets.REMOTE_TARGET }}/bin/console cache:warmup
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          privateKey: ${{ secrets.SERVER_SSH_KEY }}

# Todo: create ./var
# Todo: permissions for www-data?
# Todo: cache warmup
# Todo: add api key to .env
# Todo: keep previous releases
# Todo: make bin/console executable
# Todo: run bin/console asset-map:compile
